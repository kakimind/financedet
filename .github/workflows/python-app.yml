name: Run Stock Analysis with GPU Support

on:
  schedule:
    - cron: '30 6 * * *'  # 매일 16:00 KST에 실행 (UTC 07:00)
  workflow_dispatch:  # 수동 실행을 위한 설정

jobs:
  build:
    runs-on: ubuntu-latest  # Ubuntu 최신 버전에서 실행

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # 리포지토리의 코드를 체크아웃

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'  # 사용할 Python 버전 고정

      - name: Install CUDA Toolkit
        run: |
          echo "CUDA Toolkit 설치 중..."
          
          # CUDA Keyring 패키지 다운로드 및 설치
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
          sudo dpkg -i cuda-keyring_1.1-1_all.deb

          # 패키지 목록 업데이트
          sudo apt-get update

          # CUDA Toolkit 설치
          sudo apt-get -y install cuda-toolkit-12-6  # CUDA Toolkit 설치

      - name: Install NVIDIA Driver (optional)
        run: |
          echo "NVIDIA 드라이버 설치 중..."
          # 개방형 커널 모듈 플레이버 설치
          sudo apt-get install -y nvidia-open
          # 또는 레거시 커널 모듈 플레이버 설치
          # sudo apt-get install -y cuda-drivers

      - name: Install other dependencies
        run: |
          python -m pip install --upgrade pip  # pip 업그레이드
          pip install -r requirements.txt  # requirements.txt에 명시된 패키지 설치

      - name: Check if today is a trading day
        env:
          KOREA_HOLIDAY_API_KEY: ${{ secrets.KOREA_HOLIDAY_API_KEY }}  # API 키 환경 변수 설정
        run: |
          echo "거래일 확인 중..."
          python check_trading_day.py  # 거래일 확인 스크립트 실행

      - name: Create directories
        run: |
          mkdir -p logs csv_results  # logs 및 csv_results 디렉토리 생성

      - name: Check current directory
        run: |
          echo "현재 디렉토리:"
          pwd
          echo "현재 디렉토리의 파일 목록:"
          ls -al  # 현재 디렉토리의 파일 목록 확인

      - name: Run Stock Data Fetcher
        run: |
          echo "주식 데이터 가져오기 스크립트 실행 중..."  # 실행 시작 메시지
          python stock_data_fetcher.py  # 주식 데이터 가져오기 스크립트 실행
          echo "주식 데이터 가져오기 스크립트 실행 완료."  # 실행 완료 메시지

      - name: Run Technical Indicator Calculator
        run: |
          echo "기술 지표 계산 스크립트 실행 중..."  # 실행 시작 메시지
          python technical_indicator_calculator.py  # 기술 지표 계산 스크립트 실행
          echo "기술 지표 계산 스크립트 실행 완료."  # 실행 완료 메시지

      - name: Run Model Trainer
        run: |
          echo "모델 훈련 스크립트 실행 중..."  # 실행 시작 메시지
          python model_trainer.py  # 모델 훈련 스크립트 실행
          echo "모델 훈련 스크립트 실행 완료."  # 실행 완료 메시지

      - name: Run Discord Webhook Script
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}  # Discord 웹훅 URL 시크릿 사용
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}  # OpenAI API 키 시크릿 사용
        run: |
          echo "Discord 웹훅 스크립트 실행 중..."  # 실행 시작 메시지
          python discord_webhook.py  # Discord 웹훅 스크립트 실행
          echo "Discord 웹훅 스크립트 실행 완료."  # 실행 완료 메시지

      - name: Upload log file
        uses: actions/upload-artifact@v3  # 로그 파일 업로드
        with:
          name: discord-webhook-log  # 업로드할 아티팩트의 이름
          path: logs/discord_webhook.log  # 로그 파일 경로 (필요시 수정)

      - name: Get Korean Time
        run: |
          echo "한국 시간: $(python -c 'from datetime import datetime, timedelta; print((datetime.utcnow() + timedelta(hours=9)).strftime("%Y년 %m월 %d일 %H시")))')"
